QUESTION 1:
-----------

Management System. Create two classes Book, Library.
Book class--> Attributes-->bookID,title,author,isAvailable.
Library class--> array to store book objects.
Provide methods to add book,remove book,search books(using id) and display books.

PROGRAM:
--------

import java.util.Scanner;

class Book {                                                                                                //Book class.
    private int bookID;                                                                                     //Attributes of book class.
    private String title;
    private String author;
    private boolean isAvailable;

    public Book(int bookID, String title, String author) {                                                 //Paramertized constructor to initialize values.
        this.bookID = bookID;
        this.title = title;
        this.author = author;
        this.isAvailable = true; // When a book is created, it is initially available
    }

    public int getBookID() {                                                                                // Getters and Setters
        return bookID;
    }

    public void setBookID(int bookID) {
        this.bookID = bookID;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    @Override
    public String toString() {                                                                             //Method to print the book class attributes.
        return "Book{" + 
                "bookID=" + bookID +
                ", title='" + title + '\'' +
                ", author='" + author + '\'' +
                ", isAvailable=" + isAvailable +
                '}';
    }
}

class Library {                                                                                                   //Library class.
    private Book[] books;                                                                                       //Library class attributes.
    private int capacity;
    private int size;

    public Library(int capacity) {                                                                             //Parameterized constructor to initialize values.
        this.capacity = capacity;
        this.size = 0;
        this.books = new Book[capacity];
    }

    public void addBook(Book book) {                                                                          //Method to add a book to the library by checking the capacity.
        if (size < capacity) {
            books[size] = book;
            size++;
            System.out.println("Book added successfully.");
        } else {
            System.out.println("Library is full. Cannot add more books.");
        }
    }

    public void removeBook(int bookID) {                                                                           //Method to remove a book from the library by bookID.
        for (int i = 0; i < size; i++) {
            if (books[i].getBookID() == bookID) {
                // Shift books to fill the gap
                for (int j = i; j < size - 1; j++) {
                    books[j] = books[j + 1];
                }
                size--;
                System.out.println("Book removed successfully.");
                return;
            }
        }
        System.out.println("Book not found.");
    }

    public void searchBook(int bookID) {                                                                              //Method to search for a book by bookID.
        for (int i = 0; i < size; i++) {
            if (books[i].getBookID() == bookID) {
                System.out.println("Book found:");
                System.out.println(books[i]);
                return;
            }
        }
        System.out.println("Book not found.");
    }

    public void displayBooks() {                                                                                   //Method to display all books in the library.
        if (size == 0) {                                                                                          //Checling whether size==0 if so printing library empty.
            System.out.println("Library is empty.");
            return;
        }
        System.out.println("Books in the library:");
        for (int i = 0; i < size; i++) {
            System.out.println(books[i]);
        }
    }
}

public class LibrarySystem {                                                                                           //Main class.
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Library library = new Library(10);                                                                            //Creating a library with a capacity of 10 

        while (true) {                                                                                               //Using while loop to iterate until false.
            System.out.println("1. Add a book");                                                                     //Printing the options to the user.
            System.out.println("2. Remove a book");
            System.out.println("3. Search for a book");
            System.out.println("4. Display all books");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); //Consume newline

            switch (choice) {                                                                                      //Using switch to select the correct case(Method) according to the users choice.
                case 1:
                    System.out.print("Enter book ID: ");
                    int id = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    System.out.print("Enter book title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter book author: ");
                    String author = scanner.nextLine();
                    Book newBook = new Book(id, title, author);
                    library.addBook(newBook);
                    break;
                case 2:
                    System.out.print("Enter the ID of the book to remove: ");
                    int removeID = scanner.nextInt();
                    library.removeBook(removeID);
                    break;
                case 3:
                    System.out.print("Enter the ID of the book to search: ");
                    int searchID = scanner.nextInt();
                    library.searchBook(searchID);
                    break;
                case 4:
                    library.displayBooks();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice. Please enter a number between 1 and 5.");
            }
        }
    }
}




OUTPUT:
-------

Adding new book:
---------------
1. Add a book
2. Remove a book
3. Search for a book
4. Display all books
5. Exit
Enter your choice: 1
Enter book ID: 101
Enter book title: Java Programming
Enter book author: Ann
Book added successfully.


Displaying all the books in the library:
----------------------------------------
1. Add a book
2. Remove a book
3. Search for a book
4. Display all books
5. Exit
Enter your choice: 4
Books in the library:
Book{bookID=101, title='Java Programming', author='Ann', isAvailable=true}


Searching by bookId:
--------------------
1. Add a book
2. Remove a book
3. Search for a book
4. Display all books
5. Exit
Enter your choice: 3
Enter the ID of the book to search: 101
Book found:
Book{bookID=101, title='Java Programming', author='Ann', isAvailable=true}


Removing a book by using bookId:
--------------------------------
1. Add a book
2. Remove a book
3. Search for a book
4. Display all books
5. Exit
Enter your choice: 2
Enter the ID of the book to remove: 101
Book removed successfully.


____________________________________________________________________________________________________________________________________________________________________________________________________



QUESTION 2:
-----------
Create Interface Taxable with members sales Tax-7% and income Tax-10.5%, create abstract method calc Tax().
a) Create class Employee(empld,name, salary) and implement Taxable to calculate income Tax on yearly salary
b) Create class Product(pid.price.quantity) and implement Taxable to calculate sales Tax on unit price of product.
c) Create class for main method(Say DriverMain), accept employee information and a product information from user and print income tax and sales tax respectively.



PROGRAM:
--------

import java.util.Scanner;

interface Taxable {                                                                                                                  //Interface Taxable
    double SALES_TAX = 0.07;                                                                                                        //Declaring sales tax=7/100.
    double INCOME_TAX = 0.105;                                                                                                     //Declaring income tax=10.5/100.

    double calcTax();                                                                                                              //Abstract calcTax().
}

class Employee implements Taxable {                                                                                              //Employee class implements the Taxable interface.
    private int empId;                                                                                                           //Attributes of Employee class.
    private String name;
    private double salary;

    public Employee(int empId,String name,double salary) {                                                                     //Parametrized contructor to initialize the value.
        this.empId = empId;
        this.name = name;
        this.salary = salary;
    }

    @Override
    public double calcTax() {                                                                                                   //Implementing calcTax() for calculating the income tax.
        return (salary*INCOME_TAX);
    }
}

class Product implements Taxable {                                                                                              //Product class that implements the Taxable interface.
    private int pid;                                                                                                            //Attributes of 
    private double price;
    private int quantity;

    public Product(int pid,double price,int quantity) {                                                                        //Parameterized constructor to initialize the value.
        this.pid = pid;
        this.price = price;
        this.quantity = quantity;
    }

    @Override
    public double calcTax() {                                                                                                  //calcTax() method to calculate the sales tax.
        return (price*SALES_TAX*quantity);
    }
}

// Main Class
public class DriverMain {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter employee information:");                                                                     //Getting employee information from the user.
        System.out.print("Employee ID: ");
        int empId = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Employee Name: ");
        String empName = scanner.nextLine();
        System.out.print("Employee Salary: ");
        double empSalary = scanner.nextDouble();

        Employee employee = new Employee(empId, empName, empSalary);                                                         //Creating object for Employee class.

        System.out.println("\nEnter product information:");                                                                  //Getting product information from the user.
        System.out.print("Product ID: ");
        int pid = scanner.nextInt();
        System.out.print("Product Price: ");
        double price = scanner.nextDouble();
        System.out.print("Product Quantity: ");
        int quantity = scanner.nextInt();

        Product product = new Product(pid,price,quantity);                                                                 //Creating object for Product class.

        System.out.println("\nIncome Tax for the employee: "+employee.calcTax());                                           //Printing the income tax and sales tax.
        System.out.println("Sales Tax for the product: "+product.calcTax());

    }
}



OUTPUT:
-------

Enter employee information:
Employee ID: 101
Employee Name: Ann
Employee Salary: 200000

Enter product information:
Product ID: 10001
Product Price: 100
Product Quantity: 3

Income Tax for the employee: 21000.0
Sales Tax for the product: 21.000000000000004


_________________________________________________________________________________________________________________________________________________________________________________________________________
